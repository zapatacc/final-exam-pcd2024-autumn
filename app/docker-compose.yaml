version: '3.8'  # Define la versión del formato de Docker Compose

name: ticket-classification-app  # Nombre del proyecto de la aplicación

services:
  # Servicio de Frontend
  ui:
    image: ticket-classification-ui-image:latest  # Nombre y etiqueta de la imagen que se generará o usará
    container_name: ticket-classification-ui-container  # Nombre asignado al contenedor
    build:
      context: ./Ui  # Carpeta que contiene los archivos para construir la imagen del frontend
      dockerfile: Dockerfile  # Nombre del Dockerfile, relativo al contexto especificado
    ports:
      - "8501:8501"  # Mapea el puerto 8501 del host al puerto 8501 del contenedor
    depends_on:
      - model  # Garantiza que el contenedor 'model' (backend) se levante antes que el frontend
    networks:
      - ticket-classification-network  # Conecta este servicio a la red definida

  # Servicio de Backend (Modelo)
  model:
    image: ticket-classification-model-image:latest  # Nombre y etiqueta de la imagen que se generará o usará para el backend
    container_name: ticket-classification-model-container  # Nombre asignado al contenedor backend
    build:
      context: ./model  # Carpeta que contiene los archivos para construir la imagen del backend
      dockerfile: Dockerfile  # Nombre del Dockerfile, relativo al contexto especificado
    ports:
      - "8000:8000"  # Mapea el puerto 8000 del host al puerto 8000 del contenedor
    networks:
      - ticket-classification-network  # Conecta este servicio a la red definida
    environment:
      - MODEL_NAME=ticket-classification-model  # Variable de entorno para el nombre del modelo
      - DATA_PATH=/code/data  # Ruta para los datos (ajusta según la estructura de tu proyecto)

  # Definición de redes
networks:
  ticket-classification-network:  # Nombre de la red que comparten los servicios
    name: ticket-classification-network-1  # Nombre específico de la red
    driver: bridge  # El tipo de red, 'bridge' permite la comunicación interna entre los contenedores
